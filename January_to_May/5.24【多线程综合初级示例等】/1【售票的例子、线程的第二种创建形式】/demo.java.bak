/*
		售票的例子：
				多个窗口同时买票（等同于多线程）
*/
public class demo
{
	public static void main(String[] args)
	{
		Ticket t1 = new Ticket();
		Ticket t2 = new Ticket();
		Ticket t3 = new Ticket();
		Ticket t4 = new Ticket();
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
		
		
	}
}

class Ticket extends Thread
{
	private static int tick = 100;//这里写static是为了让四个线程共享一个票池。
	public void run()
	{
		while(true)
		{
			if(tick>0)
			{
				System.out.println(Ticket.currentThread().getName()+"  sale："+tick--);
			}
		}
	}
}


/*
		创建线程的第二种方法：
				声明实现Runable接口的类。然后该类再实现run方法。
				通过Thread类建立线程对象，将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。
				调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。
*/

class h implements Runnable
{
	private int tick = 100;
	public void run()
	{
		while(true)
		{
			if(tick>0)
			{
				System.out.println(Ticket.currentThread().getName()+"  sale："+tick--);
			}
		}
	}
}


class a 
{
	public static void main(String[] args)
	{
		h a = new h();
			//这里的h对象a并不是线程。因为它现在和Thread类还没有关联。
		new Thread(a).start();
	}
}

/*
		创建线程的两种方式的区别以及特点：
				接口实现方式好处：避免了单继承的局限性。
				在定义线程时，建议使用接口实现方式。
*/