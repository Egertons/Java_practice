package newkn;

import java.util.ArrayList;

/*
集合：
	1.集合和数组的区别：
		1.1集合是可长度的，而数组是固定长度的。
		1.2数组在初始化之初的时候就已经指定了内部存储的数据类型。
		     而集合则只要是对象就可以存储。（也就是说在同一个集合中可以存储不同的对象）。
	2.集合框架：
		Interface Collection<E>（向上抽取的顶层）
		
		需要注意的是集合中存放的不可能是对象的实体！
		而一般来说是对象的内存地址值。
		
		为什么会有这么多的具体容器实现？
			因为每一个容器对于数据的具体存储方式都有所不同。
			这些存储方式间的不同我们称之为“数据结构”的不同。
	3.集合框架的具体实现：{List}
		3.1介绍：
			其本质上还是个接口，具有很多的实现类。
		3.2ArrayList***
			底层的数据结构使用的是数组结构。
			特点：
			线程不同步！（但在不涉及到多线程的问题上效率较高）
				查询速度很快。
				改的速度也很快。
				但是增加和删除的操作较慢，而且当元素越多越慢。
					因为是数组结构，有角标，故而每一次在中间的异动都需要
					在整体范围上去进行修改。
		3.3LinkedList***
			底层使用的是链表数据结构。
			特点：
				由于其使用的是链表的数据结构（类似于洋葱路由层层加密）
				故而前一位元素只能索引到相邻的两个元素，查询时需要一个一个的遍历。
				但是与此同时：这种特殊的数据结构其添加和删除的速度相对数组来讲极快。
				由于只需要修改相邻两个元素的指向即可完成在结构中的定义。故而速度优势明显。
		3.4Vector（淘汰技术）
			底层实现是数组数据结构。
			特点：
				线程同步！（虽能达到线程安全，但在不涉及到多线程的问题上运行效率较低）
				其由于底层实现原理与ArrayList使用的数组相同
				故而在增删改查上的特性也一致。
					PS：再次基础上，由于其实现了线程安全，所以在速度以及效率上的取舍较大
					无论增删改查效率都不高。
				如果不涉及到多线程的话，不推荐使用。
				几乎被ArrayList替代了，实在需要线程安全的话，可以自己加锁。
			与ArrayList的区别：
				它们都是运用数组为底层实现原理的集合，
				但其扩展（由于集合是可变长度的，长度不固定）方式不同
				ArrayList：每次延长长度按照50%扩增
				Vector：每次按照100%的速度扩增（相对较为浪费空间）。
	4.集合框架的具体实现：{Set}
		4.1介绍：
			其本质上还是个接口，具有很多的实现类。
		4.2HashSet***
		4.3TreeSet
	5.集合框架的具体实现？{Map}
		5.1HashMap***
 * */
public class jihe {
	public static void main(String[] args) {
		demo_1();
	}
	public static void demo_1() {
		ArrayList al = new ArrayList();
		al.add("java 01");
		al.add("java 02");
		al.add("java 03");
		al.add("java 04");
		//尝试打印集合
		print("原集合"+al);
		print(al.size());
		al.remove("java 01");
		print("现有集合"+al);
	}
	public static void print(Object obj) {
		System.out.println(obj);
	}
}