public class demo
{
	//静态代码块的书写层级与方法函数一致。
	//静态代码块不能存在在各种方法体中。
	//思维同上，普通变量只能通过对象来调用，是不能放在静态代码块中的。
	static
	{
		System.out.println("静态代码块，用于初始化类");
	}
	
	{
		System.out.println("构造代码块，用于初始化对象");
		//优先于构造函数执行。并且可以调用普通变量。
	}
	
	/*
	构造代码块和构造函数之间的区别
	和构造函数的作用类似，都能对对象进行初始化，并且只要创建一个对象，构造代码块都会执行一次。但是反过来，构造函数则不一定每个对象建立时都执行（多个构造函数情况下，建立对象时传入的参数不同则初始化使用对应的构造函数）。
　　利用每次创建对象的时候都会提前调用一次构造代码块特性，我们可以做诸如统计创建对象的次数等功能。
	*/
	
	demo(int a)
	{
		System.out.println(a+"构造函数");
	}
	
	/*
	静态代码块和空构造函数的区别：
	静态代码块只要类被加载就会执行
	而空构造函数只有在new一个新对象时才会被执行。
	在此基础上，空构造函数每new一遍都会执行一遍
	而静态代码块，只有在类被初次加载时才会执行（用于初始化类）
		通常只执行一次。
	*/
	demo()
	{
		System.out.println("a");
	}
	public static void print(int a)
	{
		System.out.println(a);
	}
}
class hhh
{
	public static void main(String[] args)
	{
		int af = 99;
		demo.print(af);
		/*
		在这种情况下，并没有建立这个类的对象，但是由于
		需要访问其中的一个公共函数，故而需要加载本类，
		所以在这种情况下，空构造函数没有被调用而静态代码块被调用了。
		*/
		new demo(6);
	}
}
/*
静态代码块：
格式：
static
{
	静态代码块中的执行语句。
}
特点：随着类的加载而执行，严格恪守“只执行一次”的规则。
用于给类进行初始化的。
其执行顺序是只要执行这个Java文件就是启动这个类，就是这个类被加载，静态代码块就会被使用。
甚至优先于主函数执行。
*/